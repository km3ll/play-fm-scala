

play.http {
  context = "/playfw"
  # requestHandler = ""
  # errorHandler = ""
  secret.key = "hSl3VgJoF6wcFQv6iccUw4<Cbd8Pv<hOaLg0`Y`tWpZvuI4mYz_/[ZHIjf`UiI@2"
}


play.application.loader = ""


play.modules {
  enabled += "play.filters.cors.CORSModule"
  # enabled += ""
}


play.filters {

  enabled += "play.filters.cors.CORSFilter"

  cors {
    # The path prefixes to filter.
    pathPrefixes = ["*"]
    # The allowed origins. If null, all origins are allowed.
    allowedOrigins = null
    # The allowed HTTP methods. If null, all methods are allowed
    allowedHttpMethods = null
    # The allowed HTTP headers. If null, all headers are allowed.
    allowedHttpHeaders = null
    # The exposed headers
    exposedHeaders = []
    # Whether to support credentials
    supportsCredentials = true
    # The maximum amount of time the CORS meta data should be cached by the client
    preflightMaxAge = 1 hour
  }

}


slick.dbs {

  postgres {
    profile = "slick.jdbc.H2Profile$"
    db {
      driver = "org.h2.Driver"
      url = "jdbc:h2:mem:play;MODE=PostgreSQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;DATABASE_TO_UPPER=FALSE"
      user="sa"
      password=""
    }
  }

  default {
    profile = "slick.jdbc.H2Profile$"
    db {
      driver = "org.h2.Driver"
      url = "jdbc:h2:mem:play;MODE=PostgreSQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;DATABASE_TO_UPPER=FALSE"
      user="sa"
      password=""
    }
  }

}


# Scripts are written in plain old SQL and should be located in the conf/evolutions/{database name}
play.evolutions.db {
  postgres {
    enabled=false
    schema = "public"
    autoApply=true
    autoApplyDowns=true
  }

  default {
    enabled=false
    autoApply=false
    autoApplyDowns=false
  }
}


contexts {

  # Pure asynchronous or CPU operations
  user-operations {
    fork-join-executor {

      # The parallelism factor is used to determine thread pool size using the
      # following formula: ceil(available processors * factor). Resulting size
      # is then bounded by the parallelism-min and parallelism-max values.
      parallelism-factor = 1

      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 20

      # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
      # like peeking mode which "pop".
      task-peeking-mode = "FIFO"
    }
  }

  db-operations {
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 1

      # The parallelism factor is used to determine thread pool size using the
      # following formula: ceil(available processors * factor). Resulting size
      # is then bounded by the parallelism-min and parallelism-max values.
      parallelism-factor = 20

      # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
      # like peeking mode which "pop".
      task-peeking-mode = "FIFO"
    }
  }

  # default-blocking-io-dispatcher
  cache-operations {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 5
    }
    throughput = 1
  }

}